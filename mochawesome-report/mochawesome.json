{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-20T14:36:41.148Z",
    "end": "2024-08-20T14:36:43.175Z",
    "duration": 2027,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bce7d693-e6ce-4c02-9ff4-0110caceba08",
      "title": "",
      "fullFile": "C:\\Users\\USER\\Documents\\Iseng2 coding\\Digital Skola\\API Automation\\API-Automation-Test-DS-Batch-5\\test\\Testdemo.js",
      "file": "\\test\\Testdemo.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b20cb448-bfe2-4aa4-9db2-69cf001dde2c",
          "title": "API Test for Reqres",
          "fullFile": "C:\\Users\\USER\\Documents\\Iseng2 coding\\Digital Skola\\API Automation\\API-Automation-Test-DS-Batch-5\\test\\Testdemo.js",
          "file": "\\test\\Testdemo.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test - GET All Objects",
              "fullTitle": "API Test for Reqres Test - GET All Objects",
              "timedOut": false,
              "duration": 532,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(\"https://reqres.in/api/users?page=2\").get(\"objects\")\nassert.equal(response.statusCode, 200)\nconst getSchemaPath = \"resource/jsonSchema/get-object.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(getSchemaPath, 'utf8'))\nassert.jsonSchema(response.body, jsonSchema)\nconsole.log(response.body)",
              "err": {},
              "uuid": "d127868c-df0b-4f7d-9024-357bea4a8a0e",
              "parentUUID": "b20cb448-bfe2-4aa4-9db2-69cf001dde2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - POST Create a User",
              "fullTitle": "API Test for Reqres Test - POST Create a User",
              "timedOut": false,
              "duration": 496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}\nconst response = await request(\"https://reqres.in/api/users\")\n.post(\"objects\")\n.send(body)\nassert.equal(response.statusCode, 201)\nassert.equal(response.body.name, \"morpheus\")\nassert.equal(response.body.job, \"leader\")\nconst postSchemaPath = \"resource/jsonSchema/post-object.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(postSchemaPath, 'utf8'))\nassert.jsonSchema(response.body, jsonSchema)\nconsole.log(response.body)",
              "err": {},
              "uuid": "d337acdf-e477-478f-ab52-f4fa13202110",
              "parentUUID": "b20cb448-bfe2-4aa4-9db2-69cf001dde2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - DELETE Delete a User",
              "fullTitle": "API Test for Reqres Test - DELETE Delete a User",
              "timedOut": false,
              "duration": 461,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(BASE_URL).delete(\"objects\")\nassert.equal(response.statusCode, 204)\nconsole.log(response.body)",
              "err": {},
              "uuid": "45574bb2-d0a0-4e4b-bd97-8c637d656f57",
              "parentUUID": "b20cb448-bfe2-4aa4-9db2-69cf001dde2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - PUT Update a User",
              "fullTitle": "API Test for Reqres Test - PUT Update a User",
              "timedOut": false,
              "duration": 523,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n     \"name\": \"morpheus\",\n     \"job\": \"zion resident\"\n}\nconst response = await request(BASE_URL)\n.put(\"objects\")\n.send(body)\nassert.equal(response.statusCode, 200)\nassert.equal(response.body.name, \"morpheus\")\nassert.equal(response.body.job, \"zion resident\")\nconst putSchemaPath = \"resource/jsonSchema/put-object.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(putSchemaPath, 'utf8'))\nassert.jsonSchema(response.body, jsonSchema)\nconsole.log(response.body)",
              "err": {},
              "uuid": "0865ca71-a99f-4854-940d-cb32cbe7fa5e",
              "parentUUID": "b20cb448-bfe2-4aa4-9db2-69cf001dde2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d127868c-df0b-4f7d-9024-357bea4a8a0e",
            "d337acdf-e477-478f-ab52-f4fa13202110",
            "45574bb2-d0a0-4e4b-bd97-8c637d656f57",
            "0865ca71-a99f-4854-940d-cb32cbe7fa5e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2012,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}